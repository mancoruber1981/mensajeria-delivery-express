// backend/utils/sendEmail.js

const nodemailer = require('nodemailer');

const sendEmail = async (options) => {
    console.log("--- ðŸ“§ Iniciando la funciÃ³n sendEmail ---");
    console.log("   - Destinatario:", options.email);
    console.log("   - Asunto:", options.subject);

    // 1. Crear un "transporter"
Â  Â  const transporter = nodemailer.createTransport({
Â  Â  Â  Â  host: process.env.EMAIL_HOST,
Â  Â  Â  Â  port: process.env.EMAIL_PORT,
        secure: process.env.EMAIL_PORT === '465', // true para el puerto 465, false para otros como 587
Â  Â  Â  Â  auth: {
Â  Â  Â  Â  Â  Â  user: process.env.EMAIL_USER,
Â  Â  Â  Â  Â  Â  pass: process.env.EMAIL_PASS,
Â  Â  Â  Â  },
Â  Â  });

Â  Â  // 2. Definir las opciones del correo
Â  Â  const mailOptions = {
Â  Â  Â  Â  from: `Delivery Express S.A.S. <${process.env.EMAIL_USER}>`,
Â  Â  Â  Â  to: options.email,
Â  Â  Â  Â  subject: options.subject,
Â  Â  Â  Â  text: options.message,
Â  Â  };

Â  Â  // 3. Enviar el correo y capturar cualquier error
Â  Â  try {
        console.log("   - Intentando enviar correo a travÃ©s de Nodemailer...");
Â  Â  Â  Â  const info = await transporter.sendMail(mailOptions);
        console.log(`âœ… Â¡Correo enviado con Ã©xito! Respuesta del servidor: ${info.response}`);
    } catch (error) {
        console.error("ðŸ”¥ ERROR DENTRO DE sendEmail:", error);
        // Volvemos a lanzar el error para que la funciÃ³n que llamÃ³ a sendEmail (createLoan) se entere del fallo.
        throw new Error('Fallo al enviar el correo desde la utilidad sendEmail.');
    }
};

module.exports = sendEmail;