// frontend/src/contexts/AuthContext.js 

 // Bloque 1 
 import React, { createContext, useState, useContext, useEffect, useCallback } from 'react'; // <-- CAMBIO #1 APLICADO 
 import { useNavigate } from 'react-router-dom'; 
 import API from '../api/api'; 

 // Bloque 2 
 const AuthContext = createContext(null); 

 // Bloque 3 
 export const useAuth = () => { 
 Â  Â  return useContext(AuthContext); 
 }; 

 // Bloque 4 
 export const AuthProvider = ({ children }) => { 
 Â  Â  const [user, setUser] = useState(null); 
 Â  Â  const [token, setToken] = useState(localStorage.getItem('token')); 
 Â  Â  const [isLoading, setIsLoading] = useState(true); 
 Â  Â  const navigate = useNavigate(); 

 Â  Â  // Bloque 5 
 Â  Â  const login = useCallback(async (username, password) => { // <-- CAMBIO #2 APLICADO 
 Â  Â  try { 
 Â  Â  Â  Â  const res = await API.post('/auth/login', { username, password }); 
 Â  Â  Â  Â  const { token: receivedToken } = res.data; 

 Â  Â  Â  Â  localStorage.setItem('token', receivedToken); 
 Â  Â  Â  Â  setToken(receivedToken); 
 Â  Â  Â  Â  API.defaults.headers.common['Authorization'] = `Bearer ${receivedToken}`; 

 Â  Â  Â  Â  const profileRes = await API.get('/auth/me/profile'); 

 Â  Â  Â  Â  const fullUserData = { 
 Â  Â  Â  Â  Â  Â  _id: profileRes.data._id, 
 Â  Â  Â  Â  Â  Â  username: profileRes.data.username, 
 Â  Â  Â  Â  Â  Â  role: profileRes.data.role, 
 Â  Â  Â  Â  Â  Â  profile: profileRes.data.profile, 
 Â  Â  Â  Â  Â  Â  associatedClient: profileRes.data.associatedClient, 
 Â  Â  Â  Â  }; 

 Â  Â  Â  Â  // ðŸ‘‡ CorrecciÃ³n aquÃ­: si el usuario es 'cliente', usamos su propio perfil _id como clientId 
 Â  Â  Â  Â  if (fullUserData.role === 'cliente') { 
 Â  Â  Â  Â  Â  Â  try { 
 Â  Â  Â  Â  Â  Â  Â  Â  const clientRes = await API.get(`/clients/${fullUserData.profile._id}`); 
 Â  Â  Â  Â  Â  Â  Â  Â  fullUserData.clientProfile = clientRes.data; 
 Â  Â  Â  Â  Â  Â  } catch (clientErr) { 
 Â  Â  Â  Â  Â  Â  Â  Â  console.warn("No se pudo cargar el perfil del cliente:", clientErr.message); 
 Â  Â  Â  Â  Â  Â  Â  Â  fullUserData.clientProfile = null; 
 Â  Â  Â  Â  Â  Â  } 
 Â  Â  Â  Â  } 

 Â  Â  Â  Â  // ðŸ‘‡ Para auxiliar con cliente asociado (esto ya estaba bien) 
 Â  Â  Â  Â  if (fullUserData.role === 'auxiliar' && fullUserData.associatedClient) { 
 Â  Â  Â  Â  Â  Â  try { 
 Â  Â  Â  Â  Â  Â  Â  Â  const clientRes = await API.get(`/clients/${fullUserData.associatedClient}`); 
 Â  Â  Â  Â  Â  Â  Â  Â  fullUserData.associatedClientProfile = clientRes.data; 
 Â  Â  Â  Â  Â  Â  } catch (clientErr) { 
 Â  Â  Â  Â  Â  Â  Â  Â  console.warn("No se pudo cargar el perfil del cliente asociado para el auxiliar:", clientErr.message); 
 Â  Â  Â  Â  Â  Â  Â  Â  fullUserData.associatedClientProfile = null; 
 Â  Â  Â  Â  Â  Â  } 
 Â  Â  Â  Â  } 

 Â  Â  Â  Â  setUser(fullUserData); 
 Â  Â  Â  Â  console.log("DEBUG AuthContext: Datos finales del usuario a establecer:", fullUserData); 

 Â  Â  Â  Â  // ðŸš€ LÃ“GICA DE REDIRECCIÃ“N AÃ‘ADIDA ðŸš€ 
 Â  Â  Â  Â  switch (fullUserData.role) { 
 Â  Â  Â  Â  Â  Â  case 'admin': 
 Â  Â  Â  Â  Â  Â  Â  Â  navigate('/dashboard-admin'); 
 Â  Â  Â  Â  Â  Â  Â  Â  break; 
 Â  Â  Â  Â  Â  Â  case 'cliente': 
 Â  Â  Â  Â  Â  Â  Â  Â  navigate('/dashboard-cliente'); 
 Â  Â  Â  Â  Â  Â  Â  Â  break; 
 Â  Â  Â  Â  Â  Â  case 'repartidor': 
 Â  Â  Â  Â  Â  Â  Â  Â  navigate('/dashboard-repartidor'); // <-- Â¡La ruta corregida! 
 Â  Â  Â  Â  Â  Â  Â  Â  break; 
 Â  Â  Â  Â  Â  Â  case 'auxiliar': 
 Â  Â  Â  Â  Â  Â  Â  Â  navigate('/auxiliar-home'); 
 Â  Â  Â  Â  Â  Â  Â  Â  break; 
 Â  Â  Â  Â  Â  Â  case 'contador': 
 Â  Â  Â  Â  Â  Â  Â  Â  navigate('/dashboard-contador'); 
 Â  Â  Â  Â  Â  Â  Â  Â  break; 
 Â  Â  Â  Â  Â  Â  default: 
 Â  Â  Â  Â  Â  Â  Â  Â  navigate('/'); 
 Â  Â  Â  Â  Â  Â  Â  Â  break; 
 Â  Â  Â  Â  } 

 Â  Â  Â  Â  return fullUserData; 

 Â  Â  } catch (error) { 
 Â  Â  Â  Â  console.error("ERROR en login:", error.message); 
 Â  Â  Â  Â  console.error("Detalles del error (si existen):", error.response?.data); 
 Â  Â  Â  Â  localStorage.removeItem('token'); 
 Â  Â  Â  Â  setToken(null); 
 Â  Â  Â  Â  setUser(null); 
 Â  Â  Â  Â  throw error; 
 Â  Â  } 
 Â  Â  }, [navigate]); // <-- CAMBIO #2 APLICADO 

 Â  Â  // Bloque 6 
 Â  Â  const register = useCallback(async (userData) => { // <-- CAMBIO #2 APLICADO 
 Â  Â  Â  Â  try { 
 Â  Â  Â  Â  Â  Â  const res = await API.post('/auth/register', userData); 
 Â  Â  Â  Â  Â  Â  const { token: receivedToken } = res.data; 

 Â  Â  Â  Â  Â  Â  localStorage.setItem('token', receivedToken); 
 Â  Â  Â  Â  Â  Â  setToken(receivedToken); 
 Â  Â  Â  Â  Â  Â  API.defaults.headers.common['Authorization'] = `Bearer ${receivedToken}`; 

 Â  Â  Â  Â  Â  Â  const profileRes = await API.get('/auth/me/profile'); 

 Â  Â  Â  Â  Â  Â  const fullUserData = { 
 Â  Â  Â  Â  Â  Â  Â  Â  _id: profileRes.data._id, 
 Â  Â  Â  Â  Â  Â  Â  Â  username: profileRes.data.username, 
 Â  Â  Â  Â  Â  Â  Â  Â  role: profileRes.data.role, 
 Â  Â  Â  Â  Â  Â  Â  Â  profile: profileRes.data.profile, 
 Â  Â  Â  Â  Â  Â  Â  Â  associatedClient: profileRes.data.associatedClient, 
 Â  Â  Â  Â  Â  Â  }; 

 Â  Â  Â  Â  Â  Â  if (fullUserData.associatedClient) { 
 Â  Â  Â  Â  Â  Â  Â  Â  try { 
 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const clientRes = await API.get(`/clients/${fullUserData.associatedClient}`); 
 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fullUserData.associatedClientProfile = clientRes.data; 
 Â  Â  Â  Â  Â  Â  Â  Â  } catch (clientErr) { 
 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.warn("No se pudo cargar el perfil del cliente asociado para el auxiliar durante el registro:", clientErr.message); 
 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fullUserData.associatedClientProfile = null; 
 Â  Â  Â  Â  Â  Â  Â  Â  } 
 Â  Â  Â  Â  Â  Â  } 

 Â  Â  Â  Â  Â  Â  setUser(fullUserData); 
 Â  Â  Â  Â  Â  Â  return fullUserData; 

 Â  Â  Â  Â  } catch (error) { 
 Â  Â  Â  Â  Â  Â  console.error('Error de registro:', error.response?.data?.message || error.message); 
 Â  Â  Â  Â  Â  Â  localStorage.removeItem('token'); 
 Â  Â  Â  Â  Â  Â  setToken(null); 
 Â  Â  Â  Â  Â  Â  setUser(null); 
 Â  Â  Â  Â  Â  Â  throw error; 
 Â  Â  Â  Â  } 
 Â  Â  }, []); // <-- CAMBIO #2 APLICADO 

 Â  Â  // Bloque 7 
 Â  Â  const logout = useCallback(() => { // <-- CAMBIO #2 APLICADO 
 Â  Â  Â  Â  console.log("DEBUG: Realizando logout."); 
 Â  Â  Â  Â  localStorage.removeItem('token'); 
 Â  Â  Â  Â  setToken(null); 
 Â  Â  Â  Â  setUser(null); 
 Â  Â  Â  Â  delete API.defaults.headers.common['Authorization']; 
 Â  Â  Â  Â  navigate('/login'); 
 Â  Â  }, [navigate]); // <-- CAMBIO #2 APLICADO 

 Â  Â  // Bloque 8: Cargar usuario desde token en localStorage
useEffect(() => {
    const loadUserFromToken = async () => {
        setIsLoading(true);
        const storedToken = localStorage.getItem('token');

        if (storedToken) {
            setToken(storedToken);
            API.defaults.headers.common['Authorization'] = `Bearer ${storedToken}`;
            try {
                const res = await API.get('/auth/me/profile');
                const finalUserData = {
                    _id: res.data._id,
                    username: res.data.username,
                    role: res.data.role,
                    profile: res.data.profile,
                    associatedClient: res.data.associatedClient,
                };

                if (finalUserData.profile && finalUserData.role === 'cliente') {
                    const clientRes = await API.get(`/clients/${finalUserData.profile._id}`);
                    finalUserData.clientProfile = clientRes.data;
                }

                if (finalUserData.role === 'auxiliar' && finalUserData.associatedClient) {
                    const clientRes = await API.get(`/clients/${finalUserData.associatedClient}`);
                    finalUserData.associatedClientProfile = clientRes.data;
                }

                setUser(finalUserData);
            } catch (error) {
                // âœ… CAMBIO CLAVE: Si la llamada falla, borramos el token y cerramos la sesiÃ³n
                console.error("DEBUG: Error al cargar usuario desde token. Token invÃ¡lido o expirado.");
                logout();
            }
        } else {
            setUser(null);
        }
        setIsLoading(false);
    };

    loadUserFromToken();
}, [logout]); 

 Â  Â  // Bloque 9 
 Â  Â  return ( 
 Â  Â  Â  Â  <AuthContext.Provider value={{ user, token, login, logout, register, loadingAuth: isLoading }}> 
 Â  Â  Â  Â  Â  Â  {children} 
 Â  Â  Â  Â  </AuthContext.Provider> 
 Â  Â  ); 
 };